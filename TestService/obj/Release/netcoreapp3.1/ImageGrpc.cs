// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/image.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Risfond.File.ServiceApi.Protos {
  public static partial class ImageManager
  {
    static readonly string __ServiceName = "risfond.api.images.ImageManager";

    static readonly grpc::Marshaller<global::Risfond.File.ServiceApi.Protos.UploadImgRequest> __Marshaller_risfond_api_images_UploadImgRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Risfond.File.ServiceApi.Protos.UploadImgRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Risfond.File.ServiceApi.Protos.BaseResponse> __Marshaller_risfond_api_images_BaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Risfond.File.ServiceApi.Protos.BaseResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Risfond.File.ServiceApi.Protos.UploadImgRequest, global::Risfond.File.ServiceApi.Protos.BaseResponse> __Method_UploadImage = new grpc::Method<global::Risfond.File.ServiceApi.Protos.UploadImgRequest, global::Risfond.File.ServiceApi.Protos.BaseResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UploadImage",
        __Marshaller_risfond_api_images_UploadImgRequest,
        __Marshaller_risfond_api_images_BaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Risfond.File.ServiceApi.Protos.ImageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ImageManager</summary>
    public partial class ImageManagerClient : grpc::ClientBase<ImageManagerClient>
    {
      /// <summary>Creates a new client for ImageManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImageManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ImageManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImageManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImageManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImageManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::Risfond.File.ServiceApi.Protos.UploadImgRequest, global::Risfond.File.ServiceApi.Protos.BaseResponse> UploadImage(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImage(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Risfond.File.ServiceApi.Protos.UploadImgRequest, global::Risfond.File.ServiceApi.Protos.BaseResponse> UploadImage(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_UploadImage, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ImageManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImageManagerClient(configuration);
      }
    }

  }
}
#endregion
